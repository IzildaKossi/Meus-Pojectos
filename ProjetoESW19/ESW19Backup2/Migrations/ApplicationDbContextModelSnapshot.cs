// <auto-generated />
using ESW19Backup2.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace ESW19Backup2.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ESW19Backup2.Models.Adocao", b =>
                {
                    b.Property<int>("AdocaoId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataAdocao");

                    b.Property<string>("Email");

                    b.Property<string>("Estado");

                    b.Property<string>("Nome");

                    b.Property<string>("NomeCao");

                    b.Property<string>("Telefone");

                    b.HasKey("AdocaoId");

                    b.ToTable("Adocao");
                });

            modelBuilder.Entity("ESW19Backup2.Models.Ajuda", b =>
                {
                    b.Property<int>("AjudaId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Action");

                    b.Property<string>("Controller");

                    b.Property<string>("Elemento");

                    b.Property<string>("Texto");

                    b.HasKey("AjudaId");

                    b.ToTable("Ajudas");
                });

            modelBuilder.Entity("ESW19Backup2.Models.Apoios.Apadrinhar", b =>
                {
                    b.Property<int>("ApadrinharId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Estado");

                    b.Property<string>("Morada")
                        .IsRequired();

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<string>("NomeCao");

                    b.Property<int>("Telefone");

                    b.Property<int>("TipoApadrinhamentoId");

                    b.HasKey("ApadrinharId");

                    b.HasIndex("TipoApadrinhamentoId");

                    b.ToTable("Apadrinhar");
                });

            modelBuilder.Entity("ESW19Backup2.Models.Apoios.Area", b =>
                {
                    b.Property<int>("AreaId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nomes");

                    b.HasKey("AreaId");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("ESW19Backup2.Models.Apoios.TipoApadrinhamento", b =>
                {
                    b.Property<int>("TipoApadrinhamentoId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Tipo");

                    b.HasKey("TipoApadrinhamentoId");

                    b.ToTable("TipoApadrinhamento");
                });

            modelBuilder.Entity("ESW19Backup2.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Contato");

                    b.Property<string>("DataNascimento");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Nome");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ESW19Backup2.Models.Atribuicao", b =>
                {
                    b.Property<int>("AtribuicaoId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FuncionarioId");

                    b.Property<int>("HorarioId");

                    b.Property<int>("TarefaId");

                    b.Property<string>("UserId");

                    b.HasKey("AtribuicaoId");

                    b.HasIndex("FuncionarioId");

                    b.HasIndex("HorarioId");

                    b.HasIndex("TarefaId");

                    b.ToTable("Atribuicao");
                });

            modelBuilder.Entity("ESW19Backup2.Models.Cao", b =>
                {
                    b.Property<int>("CaoId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataDeEntrada");

                    b.Property<double>("Idade");

                    b.Property<string>("Nome");

                    b.Property<string>("Raca");

                    b.HasKey("CaoId");

                    b.ToTable("Cao");
                });

            modelBuilder.Entity("ESW19Backup2.Models.Erro", b =>
                {
                    b.Property<int>("ErroId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Codigo");

                    b.Property<string>("Mensagem");

                    b.HasKey("ErroId");

                    b.ToTable("Erros");
                });

            modelBuilder.Entity("ESW19Backup2.Models.Estado", b =>
                {
                    b.Property<int>("EstadoId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome");

                    b.HasKey("EstadoId");

                    b.ToTable("Estados");
                });

            modelBuilder.Entity("ESW19Backup2.Models.Evento", b =>
                {
                    b.Property<int>("EventoId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Data");

                    b.Property<string>("Descricao");

                    b.Property<string>("HoraFim");

                    b.Property<string>("HoraInicio");

                    b.Property<string>("Local");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<double>("preco");

                    b.HasKey("EventoId");

                    b.ToTable("Evento");
                });

            modelBuilder.Entity("ESW19Backup2.Models.Funcionario", b =>
                {
                    b.Property<int>("FuncionarioId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Data");

                    b.Property<string>("Email");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<string>("Sobrenome");

                    b.Property<int>("Telemovel");

                    b.HasKey("FuncionarioId");

                    b.ToTable("Funcionarios");
                });

            modelBuilder.Entity("ESW19Backup2.Models.Horarios", b =>
                {
                    b.Property<int>("HorariosID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Data");

                    b.Property<string>("Hora")
                        .IsRequired();

                    b.HasKey("HorariosID");

                    b.ToTable("Horarios");
                });

            modelBuilder.Entity("ESW19Backup2.Models.Image", b =>
                {
                    b.Property<int>("ImageID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FileName");

                    b.Property<byte[]>("ImageData");

                    b.Property<int>("ImageSize");

                    b.HasKey("ImageID");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("ESW19Backup2.Models.ReportarOcorrencia", b =>
                {
                    b.Property<int>("ReportarOcorrenciaId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao");

                    b.Property<string>("ImagePath");

                    b.Property<string>("Localizacao");

                    b.Property<string>("Name");

                    b.Property<string>("Propriedade")
                        .IsRequired();

                    b.Property<int>("TipoPrioridade");

                    b.Property<int>("TiposDeAjudaTipoPrioridadeId");

                    b.HasKey("ReportarOcorrenciaId");

                    b.HasIndex("TiposDeAjudaTipoPrioridadeId");

                    b.ToTable("ReportarOcorrencia");
                });

            modelBuilder.Entity("ESW19Backup2.Models.Saude", b =>
                {
                    b.Property<int>("SaudeId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CaoId");

                    b.Property<DateTime>("DataVacina");

                    b.Property<int?>("EstadoId");

                    b.HasKey("SaudeId");

                    b.HasIndex("CaoId")
                        .IsUnique();

                    b.HasIndex("EstadoId");

                    b.ToTable("Saude");
                });

            modelBuilder.Entity("ESW19Backup2.Models.Socios", b =>
                {
                    b.Property<int>("SociosId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CartaoCidadao");

                    b.Property<int>("Contribuinte");

                    b.Property<string>("Email");

                    b.Property<string>("Morada");

                    b.Property<string>("Nome");

                    b.Property<string>("PRofissao");

                    b.Property<string>("Telefone");

                    b.HasKey("SociosId");

                    b.ToTable("Socios");
                });

            modelBuilder.Entity("ESW19Backup2.Models.Tarefa", b =>
                {
                    b.Property<int>("TarefaID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao")
                        .IsRequired();

                    b.Property<int?>("HorariosID");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.HasKey("TarefaID");

                    b.HasIndex("HorariosID");

                    b.ToTable("Tarefa");
                });

            modelBuilder.Entity("ESW19Backup2.Models.TipoPrioridade", b =>
                {
                    b.Property<int>("TipoPrioridadeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("tipos");

                    b.HasKey("TipoPrioridadeId");

                    b.ToTable("TipoPrioridades");
                });

            modelBuilder.Entity("ESW19Backup2.Models.Upload.FileDetails", b =>
                {
                    b.Property<int>("FileDetailsId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao");

                    b.Property<int?>("FilesViewModelID");

                    b.Property<string>("Localizacao");

                    b.Property<string>("Name");

                    b.Property<string>("Path");

                    b.Property<string>("Prioridade")
                        .IsRequired();

                    b.Property<int?>("ReportarOcorrenciaId");

                    b.Property<int>("TipoPrioridade");

                    b.Property<int>("TiposDeAjudaTipoPrioridadeId");

                    b.HasKey("FileDetailsId");

                    b.HasIndex("FilesViewModelID");

                    b.HasIndex("ReportarOcorrenciaId");

                    b.HasIndex("TiposDeAjudaTipoPrioridadeId");

                    b.ToTable("FileDetails");
                });

            modelBuilder.Entity("ESW19Backup2.Models.Upload.FilesViewModel", b =>
                {
                    b.Property<int>("FilesViewModelID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao");

                    b.Property<string>("Localizacao");

                    b.Property<string>("Propriedade")
                        .IsRequired();

                    b.Property<int>("TipoPrioridade");

                    b.Property<int>("TiposDeAjudaTipoPrioridadeId");

                    b.HasKey("FilesViewModelID");

                    b.HasIndex("TiposDeAjudaTipoPrioridadeId");

                    b.ToTable("FilesViewModel");
                });

            modelBuilder.Entity("ESW19Backup2.Models.Voluntario", b =>
                {
                    b.Property<int>("VoluntarioId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AreaId");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<string>("Profissao")
                        .IsRequired();

                    b.Property<string>("Telefone")
                        .IsRequired();

                    b.HasKey("VoluntarioId");

                    b.HasIndex("AreaId");

                    b.ToTable("Voluntario");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ESW19Backup2.Models.Apoios.Apadrinhar", b =>
                {
                    b.HasOne("ESW19Backup2.Models.Apoios.TipoApadrinhamento", "TiposDeAjuda")
                        .WithMany()
                        .HasForeignKey("TipoApadrinhamentoId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ESW19Backup2.Models.Atribuicao", b =>
                {
                    b.HasOne("ESW19Backup2.Models.Funcionario", "Funcionarios")
                        .WithMany()
                        .HasForeignKey("FuncionarioId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ESW19Backup2.Models.Horarios", "Horario")
                        .WithMany("Atribuicaos")
                        .HasForeignKey("HorarioId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ESW19Backup2.Models.Tarefa", "Tarefa")
                        .WithMany("Candidaturas")
                        .HasForeignKey("TarefaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ESW19Backup2.Models.ReportarOcorrencia", b =>
                {
                    b.HasOne("ESW19Backup2.Models.TipoPrioridade", "TiposDeAjuda")
                        .WithMany()
                        .HasForeignKey("TiposDeAjudaTipoPrioridadeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ESW19Backup2.Models.Saude", b =>
                {
                    b.HasOne("ESW19Backup2.Models.Cao", "Cao")
                        .WithOne("Saude")
                        .HasForeignKey("ESW19Backup2.Models.Saude", "CaoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ESW19Backup2.Models.Estado", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ESW19Backup2.Models.Tarefa", b =>
                {
                    b.HasOne("ESW19Backup2.Models.Horarios")
                        .WithMany("Tarefas")
                        .HasForeignKey("HorariosID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ESW19Backup2.Models.Upload.FileDetails", b =>
                {
                    b.HasOne("ESW19Backup2.Models.Upload.FilesViewModel")
                        .WithMany("Files")
                        .HasForeignKey("FilesViewModelID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ESW19Backup2.Models.ReportarOcorrencia")
                        .WithMany("Files")
                        .HasForeignKey("ReportarOcorrenciaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ESW19Backup2.Models.TipoPrioridade", "TiposDeAjuda")
                        .WithMany()
                        .HasForeignKey("TiposDeAjudaTipoPrioridadeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ESW19Backup2.Models.Upload.FilesViewModel", b =>
                {
                    b.HasOne("ESW19Backup2.Models.TipoPrioridade", "TiposDeAjuda")
                        .WithMany()
                        .HasForeignKey("TiposDeAjudaTipoPrioridadeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ESW19Backup2.Models.Voluntario", b =>
                {
                    b.HasOne("ESW19Backup2.Models.Apoios.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ESW19Backup2.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ESW19Backup2.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ESW19Backup2.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ESW19Backup2.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
